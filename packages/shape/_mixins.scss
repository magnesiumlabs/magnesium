// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:map";
@use "@magnesium/core";
@use "@magnesium/theme";
@use "@sass-collective/property";
@use "./variables";
@use "./functions";

///
/// Core styles.
///
/// @see {mixin} theme.selector
///
@mixin core-styles {
    @each $key, $value in variables.$shapes {
        @include theme.selector(shape--#{$key}) {
            @include property(border-radius, $value);
        }
    }
}

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

// ...

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

///
/// @see {mixin} shape.declaration
/// @see {function} core.create-var
///
@mixin radius($radius, $no-var: false) {
    $value: "";

    @if functions.is-shape($radius) {
        $value: core.create-var(shape-#{$radius}, core.create-var(shape-radius, map.get(variables.$shapes, $radius)));
    } @else {
        @if $no-var {
            $value: $radius;
        } @else {
            $value: core.create-var(shape-radius, $radius);
        }
    }

    @include declaration(border-radius, $value);
}

///
/// @see {mixin} property.declaration
/// @see {function} core.create-var
/// @see {function} functions.create-custom-map
/// @see {function} functions.shape
/// @see {function} functions.is-shape
///
@mixin declaration($property, $value: null, $important: false) {
    @if functions.is-shape($property) {
        @if $value {
            $property: functions.create-custom-map($property, $value);
        } @else {
            $property: functions.create-custom-map($property, functions.shape($property));
        }
    } @else if functions.is-shape($value) {
        $value: core.create-var(shape-#{$value}, functions.shape($value));
    }

    @include property.declaration($property, $value, $important);
}

///
/// @see {mixin} shape.declaration
///
/// @deprecated Use `declaration` mixin instead.
///
@mixin property($property, $value: null, $important: false) {
    @include declaration($property, $value, $important);
}
