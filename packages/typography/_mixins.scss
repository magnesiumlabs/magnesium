// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "@magnesium/theme";
@use "@sass-collective/property";
@use "./variables";

@mixin core-styles {
    @include theme.set-class-name(typography) {
        @include base;
    }

    @each $style in map.keys(variables.$styles) {
        @include theme.set-class-name(typography--#{$style}) {
            @include typography($style);
        }
    }
}

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

// ...

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

@mixin base {
    @each $key, $value in variables.$base {
        @if ($key == "font-family") {
            @include property.declaration($key, theme.set-var(typography-font-family, $value));
        } @else {
            @include property.declaration($key, $value);
        }
    }
}

@mixin typography($style) {
    $with-custom-properties: (
        "line-height",
        "font-family",
        "font-size",
        "font-weight",
        "letter-spacing",
        "text-decoration",
        "text-transform"
    );

    @if not map.has-key(variables.$styles, $style) {
        @error "Invalid style, #{$style} doesn't exist. Choose one of #{map.keys(variables.$styles)}.";
    }

    @each $key, $value in map.get(variables.$styles, $style) {
        @if theme.is-color($value) {
            $value: theme.set-var(theme-#{$value}, theme.color($value));
        }

        @if list.index($with-custom-properties, $key) != null {
            $style-prop: "";

            @if ($key == "font-family") {
                $style-prop: theme.set-var(typography-#{$style}-#{$key}, theme.set-var(typography-#{$key}, $value));
            } @else {
                $style-prop: theme.set-var(typography-#{$style}-#{$key}, $value);
            }

            @include property.declaration($key, $style-prop);
        } @else {
            @include property.declaration($key, $value);
        }
    }
}

@function get-line-height($style) {
    @return map.get(variables.$styles, $style, line-height);
}

@function get-font-family($style) {
    @debug variables.$styles;

    @return map.get(variables.$styles, $style, font-family);
}

@function get-font-size($style) {
    @return map.get(variables.$styles, $style, font-size);
}

@function get-font-weight($style) {
    @return map.get(variables.$styles, $style, font-weight);
}

@function get-letter-spacing($style) {
    @return map.get(variables.$styles, $style, letter-spacing);
}
