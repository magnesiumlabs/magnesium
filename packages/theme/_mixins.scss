// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:map";
@use "@magnesium/core";
@use "@sass-collective/property";
@use "@unsass/utilities";
@use "./functions";
@use "./variables";

///
/// Core styles.
///
/// @see {mixin} property
/// @see {function} functions.get-keys
///
@mixin core-styles {
    @each $style in functions.get-keys() {
        .#{variables.$prefix}-theme--#{$style} {
            @include property(color, $style);
        }
    }

    @each $style in variables.$bg-colors {
        .#{variables.$prefix}-theme--#{$style}-bg {
            @include property(background-color, $style);
        }
    }
}

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

// ...

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

///
/// @example - scss
///   .foo {
///     @include theme.property(color, darkcyan);
///   }
///
/// @example - css
///   .foo {
///     color: darkcyan;
///   }
///
/// @example - scss
///   .foo {
///     @include theme.property(color, primary);
///   }
///
/// @example - css
///   .foo {
///     color: var(--mg-theme-primary, #2674a2);
///   }
///
/// @example - scss
///   .foo {
///     @include theme.property(primary);
///   }
///
/// @example - css
///   .foo {
///     --mg-theme-primary: #2674a2;
///   }
///
/// @example - scss
///   .foo {
///     @include theme.property(primary, darkcyan);
///   }
///
/// @example - css
///   .foo {
///     --mg-theme-primary: darkcyan;
///   }
///
/// @example - scss
///   .foo {
///     @include theme.property(custom-properties.create(foo, darkcyan));
///   }
///
/// @example - css
///   .foo {
///     --mg-foo: darkcyan;
///   }
///
/// @example - scss
///   .foo {
///     @include theme.property(custom-properties.create(--foo, darkcyan));
///   }
///
/// @example - css
///   .foo {
///     --foo: darkcyan;
///   }
///
/// @see {mixin} property.declaration
/// @see {function} core.create-var
/// @see {function} functions.create-custom-map
/// @see {function} functions.get-color
/// @see {function} functions.exist
///
@mixin property($property, $value: null, $important: false) {
    @if functions.exist($property) {
        @if $value {
            $property: functions.create-custom-map($property, $value);
        } @else {
            $property: functions.create-custom-map($property, functions.get-color($property));
        }
    } @else if functions.exist($value) {
        $value: core.create-var(theme-#{$value}, functions.get-color($value));
    }

    @include property.declaration($property, $value, $important);
}

///
/// Disabled touch screen.
///
@mixin disabled-touch-screen {
    @include utilities.disabled-touch-screen {
        @content;
    }
}

///
/// Disabled pointer events.
///
@mixin disabled-pointer-events {
    @include utilities.disabled-pointer-events;
}

///
/// @example - scss
///   @include theme.prefers-color-scheme {
///     :root {
///       color: #2674a2;
///     }
///   }
///
/// @example - css
///   @media (prefers-color-scheme: light) {
///     :root {
///       color: #2674a2;
///     }
///   }
///
/// @example - scss
///   @include theme.prefers-color-scheme(dark) {
///     :root {
///       color: #2674a2;
///     }
///   }
///
/// @example - css
///   @media (prefers-color-scheme: dark) {
///     :root {
///       color: #2674a2;
///     }
///   }
///
@mixin prefers-color-scheme($scheme: light) {
    @if not map.has-key(variables.$prefers-color-scheme, $scheme) {
        @error "Invalid color scheme, #{$scheme} doesn't exist. Choose one of #{map.keys(variables.$prefers-color-scheme)}.";
    }

    @media (prefers-color-scheme: $scheme) {
        @content;
    }
}
