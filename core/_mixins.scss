// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:list";
@use "@unsass/string";
@use "@unsass/css";
@use "@unsass/css/custom-properties";
@use "./variables";

///
/// Emits CSS custom properties declarations from a user-provided theme's token transformed
/// with `create-theme-vars()` function.
///
/// @example - scss
///   $theme: (
///     "text-color": darkcyan
///   );
///
///   $theme: create-theme-vars($theme, "button"); -> `("text-color": var(--mg-button-text-color, darkcyan))`
///
///   .foo {
///     @include emit-theme-vars($theme);
///   }
///
/// @example - css
///   .foo {
///     --mg-button-text-color: darkcyan;
///   }
///
/// @param {Map} $theme - The theme tokens map.
///
@mixin emit-theme-vars($theme) {
    @each $key, $value in $theme {
        @if $value {
            $var: string.trim($value, "var(", ")");
            $comma: string.index($var, ",");

            @if $comma {
                #{string.slice($var, 1, $comma - 1)}: string.slice($var, $comma + 1);
            } @else {
                #{$var}: $value;
            }
        }
    }
}

///
/// Emits CSS custom properties declarations from a user-provided theme's.
///
/// @example - scss
///   $theme: (
///     "primary": darkcyan
///   );
///
///   .foo {
///     @include emit-custom-props($theme, "theme");
///   }
///
/// @example - css
///   .foo {
///     --mg-theme-primary: darkcyan;
///   }
///
/// @param {Map} $theme - The theme tokens map.
/// @param {String} $prefix - Token's prefix name to prepend for each token's custom property name.
///
@mixin emit-custom-props($theme, $prefix: null) {
    @each $key, $value in $theme {
        $token: string.combine(variables.$prefix, $prefix, $key);
        $custom-prop: custom-properties.create($token, $value);

        @include css.declaration($custom-prop);
    }
}

///
/// Emits CSS media feature `prefers-color-scheme` declarations.
///
/// @example - scss
///   @include theme.emit-color-scheme("light") {
///     :root {
///       --mg-button-text-color: darkcyan;
///     }
///   }
///
/// @example - css
///   @media (prefers-color-scheme: light) {
///     :root {
///       --mg-button-text-color: darkcyan;
///     }
///   }
///
/// @param {Map} $scheme - The color scheme. Choose between `light` or `dark`.
///
@mixin emit-color-scheme($scheme: "light") {
    $theme: (
        "light",
        "dark"
    );

    @if list.index($theme, $scheme) == null {
        @error "Invalid color scheme, '#{$scheme}' doesn't exist. Choose one of '#{$theme}'.";
    }

    @media (prefers-color-scheme: $scheme) {
        @content;
    }
}

///
/// @deprecated Use `emit-color-scheme()` mixin instead.
///
@mixin prefers-color-scheme($scheme: light) {
    $theme: (
        light,
        dark
    );

    @if list.index($theme, $scheme) == null {
        @error "Invalid color scheme, '#{$scheme}' doesn't exist. Choose one of '#{$theme}'.";
    }

    @media (prefers-color-scheme: $scheme) {
        @content;
    }
}
