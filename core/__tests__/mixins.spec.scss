// ============================================================================================= //
//                                             TEST                                              //
// ============================================================================================= //

@use "true" as *;
@use "../../__tests__/tokens";
@use "../mixins" as theme;
@use "../functions" as theme-functions;

@include describe("theme") {
    @include describe("mixins") {
        @include describe("emit-custom-props()") {
            @include it("Should return theme custom properties declarations.") {
                @include assert {
                    @include output(false) {
                        .test {
                            @include theme.emit-custom-props(tokens.$button, "button");
                        }
                    }

                    @include expect(false) {
                        .test {
                            --mg-button-text-color: var(--mg-color-primary, darkcyan);
                            --mg-button-text-size: 16px;
                            --mg-button-padding-top: 12px;
                        }
                    }
                }
            }

            @include it("Should return theme custom properties declarations without prefix.") {
                @include assert {
                    @include output(false) {
                        .test {
                            @include theme.emit-custom-props(tokens.$button);
                        }
                    }

                    @include expect(false) {
                        .test {
                            --mg-text-color: var(--mg-color-primary, darkcyan);
                            --mg-text-size: 16px;
                            --mg-padding-top: 12px;
                        }
                    }
                }
            }
        }

        @include describe("emit-theme-vars()") {
            @include it("Should return custom theme declarations.") {
                @include assert {
                    @include output(false) {
                        $theme: theme-functions.create-theme-vars(tokens.$button, "button");

                        .test {
                            @include theme.emit-theme-vars($theme);
                        }
                    }

                    @include expect(false) {
                        .test {
                            --mg-button-text-color: var(--mg-color-primary, darkcyan);
                            --mg-button-text-size: 16px;
                            --mg-button-padding-top: 12px;
                        }
                    }
                }
            }

            @include it("Should return custom theme declarations without null.") {
                @include assert {
                    @include output(false) {
                        $theme: theme-functions.create-theme-vars((
                            "text-color": darkcyan,
                            "text-size": null
                        ), "button");

                        .test {
                            @include theme.emit-theme-vars($theme);
                        }
                    }

                    @include expect(false) {
                        .test {
                            --mg-button-text-color: darkcyan;
                        }
                    }
                }
            }
        }

        @include describe("emit-color-scheme()") {
            @include it("Should return the CSS declarations for light color theme.") {
                @include assert {
                    @include output(false) {
                        .test {
                            @include theme.emit-color-scheme("light") {
                                --mg-button-text-color: darkcyan;
                            }
                        }
                    }

                    @include expect(false) {
                        @media (prefers-color-scheme: light) {
                            .test {
                                --mg-button-text-color: darkcyan;
                            }
                        }
                    }
                }
            }

            @include it("Should return the CSS declarations for dark color theme.") {
                @include assert {
                    @include output(false) {
                        .test {
                            @include theme.emit-color-scheme("dark") {
                                --mg-button-text-color: darkorange;
                            }
                        }
                    }

                    @include expect(false) {
                        @media (prefers-color-scheme: dark) {
                            .test {
                                --mg-button-text-color: darkorange;
                            }
                        }
                    }
                }
            }
        }
    }
}
