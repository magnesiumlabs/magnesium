// ============================================================================================= //
//                                             TEST                                              //
// ============================================================================================= //

@use "true" as *;
@use "../../__tests__/tokens";
@use "../functions" as theme;

@include describe("theme") {
    @include describe("functions") {
        @include describe("create-name()") {
            @include it("Should return theme property name.") {
                @include assert-equal(theme.create-name("button", "text-color"), "mg-button-text-color");
            }
        }

        @include describe("validation()") {
            @include it("Should return validated theme tokens.") {
                @include assert-equal(theme.validation(tokens.$button, (
                    "text-color": darkorange
                )), (
                    "text-color": darkorange
                ));
            }
        }

        @include describe("create-theme-vars()") {
            @include it("Should return a map of tokens with custom properties.") {
                @include assert-equal(theme.create-theme-vars(tokens.$button, "button"), (
                    "text-color": var(--mg-button-text-color, var(--mg-color-primary, darkcyan)),
                    "text-size": var(--mg-button-text-size, 16px),
                    "padding": (
                        "top": var(--mg-button-padding-top, 12px)
                    )
                ));
            }

            @include it("Should return a map of tokens with custom properties without component name prefix.") {
                @include assert-equal(theme.create-theme-vars(tokens.$button, null), (
                    "text-color": var(--mg-text-color, var(--mg-color-primary, darkcyan)),
                    "text-size": var(--mg-text-size, 16px),
                    "padding": (
                        "top": var(--mg-padding-top, 12px)
                    )
                ));
            }
        }

        @include describe("emit-variable()") {
            @include it("Should return theme CSS variable.") {
                @include assert-equal(theme.emit-variable(tokens.$theme, "primary", false, "theme"), var(--mg-theme-primary));
            }

            @include it("Should return validated theme tokens with fallback.") {
                @include assert-equal(theme.emit-variable(tokens.$theme, "primary", true, "theme"), var(--mg-theme-primary, darkcyan));
            }
        }
    }
}
