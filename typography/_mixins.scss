// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "@unsass/types" as type;
@use "../core";

$_custom-property-prefix: "typography";

///
/// Generates user-provided theme's tokens for the typography component management with tokens validation.
///
/// @example - scss
///   $theme: (
///     "body-font-size": 16px
///   );
///
///   .foo {
///     @include typography.theme($theme);
///   }
///
/// @example - css
///   .foo {
///     --mg-typography-body-font-size: 16px;
///   }
///
/// @param {Map} $theme - The theme tokens map. Use the default `$typographies` tokens.
///
@mixin theme($theme) {
    @each $key, $value in $theme {
        @if type.is-map($value) {
            @error "Invalid tokens map, the tokens map can't contain more than one level.";
        }
    }

    $tokens: core.validate-theme(core.$typographies, $theme);
    $tokens: core.create-theme-vars($theme, $_custom-property-prefix);

    @include core.emit-theme-vars($tokens);
}
