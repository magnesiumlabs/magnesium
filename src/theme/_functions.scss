// ============================================================================================= //
//                                           FUNCTIONS                                           //
// ============================================================================================= //

@use "sass:map";
@use "@unsass/css/custom-properties";
@use "@unsass/types" as type;
@use "../variables";
@use "../functions";

///
/// @example - scss
///   $light-theme: (
///     label-color: darkcyan
///   );
///
///   $theme: theme.create-theme-var($light-theme, button); -> `(label-color: var(--mg-button-label-color, darkcyan))`
///
///   .foo {
///     color: map.get($theme, label-color);
///   }
///
/// @example - css
///   .foo {
///     color: var(--md-button-label-color, darkcyan);
///   }
///
/// @param {Map} $theme - The theme tokens map.
/// @param {String} $prefix - Component name to prepend for each token's custom property name.
///
@function create-theme-var($theme, $prefix) {
    $result: ();

    @each $key, $value in $theme {
        $token: functions.create-name(#{$prefix}-#{$key});

        @if type.is-map($theme) {
            @if functions.exist($value) {
                $value: custom-properties.create-var(custom-properties.create(functions.create-name(theme-#{$value}), map.get(variables.$colors, $value)));
            }

            $value: custom-properties.create-var(custom-properties.create($token, $value));
        } @else if type.is-list($theme) or type.is-string($theme) {
            $value: custom-properties.create-var(custom-properties.create($token));
        }

        $result: map.set($result, $key, $value);
    }

    @return $result;
}

///
/// @example - scss
///   $color: theme.get-theme-tokens(); -> `(primary, secondary)`
///
@function get-theme-tokens() {
    @return map.keys(variables.$colors);
}

///
/// @example - scss
///   $color: theme.get-theme-color(primary); -> `darkcyan`
///
@function get-theme-color($token) {
    @if not map.has-key(variables.$colors, $token) {
        @error "Invalid color scheme, '#{$token}' doesn't exist. Choose one of #{map.keys(variables.$colors)}.";
    }

    @return map.get(variables.$colors, $token);
}
