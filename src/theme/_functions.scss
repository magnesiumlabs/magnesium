// ============================================================================================= //
//                                           FUNCTIONS                                           //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "@unsass/css/custom-properties";
@use "@unsass/types" as type;
@use "../variables";
@use "../functions";

// ------------------------------------------------------------------------- //
// Private functions
// ------------------------------------------------------------------------- //

///
/// Check if color key exist.
///
@function _exist($key) {
    @return map.has-key(variables.$colors, $key);
}

///
/// Check if shape key exist.
///
@function _exist-shape($key) {
    @return map.has-key(variables.$shapes, $key);
}

// ------------------------------------------------------------------------- //
// Public functions
// ------------------------------------------------------------------------- //

///
/// @example - scss
///   $theme: (
///     "label-color": darkcyan
///   );
///
///   $theme: create-theme-vars($theme, "button"); -> `(label-color: var(--mg-button-label-color, darkcyan))`
///
///   .foo {
///     color: map.get($theme, label-color);
///   }
///
/// @example - css
///   .foo {
///     color: var(--mg-button-label-color, darkcyan);
///   }
///
/// @param {Map} $theme - The theme tokens map.
/// @param {String} $prefix - Component name to prepend for each token's custom property name.
///
@function create-theme-vars($theme, $prefix) {
    $result: ();

    @each $key, $value in $theme {
        $token: functions.create-name(#{$prefix}-#{$key});

        @if type.is-map($theme) {
            @if _exist($value) {
                $value: custom-properties.create-var(custom-properties.create(functions.create-name(theme-#{$value}), map.get(variables.$colors, $value)));
            }

            @if _exist-shape($value) {
                $value: custom-properties.create-var(custom-properties.create(functions.create-name(theme-shape), map.get(variables.$shapes, $value)));
            }

            $value: custom-properties.create-var(custom-properties.create($token, $value));
        } @else if type.is-list($theme) or type.is-string($theme) {
            $value: custom-properties.create-var(custom-properties.create($token));
        }

        $result: map.set($result, $key, $value);
    }

    @return $result;
}

///
/// @deprecated Use `create-theme-vars` function instead.
///
@function create-theme-var($theme, $prefix) {
    @return create-theme-vars($theme, $prefix);
}

///
/// @example - scss
///   $color: get-theme-tokens(); -> `("primary", "secondary")`
///
@function get-theme-tokens() {
    @return map.keys(variables.$colors);
}

///
/// @example - scss
///   $color: get-theme-color("primary"); -> `darkcyan`
///
@function get-theme-color($token) {
    @if not map.has-key(variables.$colors, $token) {
        @error "Invalid color scheme, '#{$token}' doesn't exist. Choose one of #{map.keys(variables.$colors)}.";
    }

    @return map.get(variables.$colors, $token);
}

///
/// Validates theme's token and throws an error if tokens are invalid.
///
/// @param {Map} $reference - A map of reference tokens.
/// @param {Map} $tokens - A map of theme's tokens.
///
/// @return {Map} The validated theme map.
///
@function validate-tokens($reference, $tokens) {
    $keys: map.keys($reference);
    $unsupported-tokens: ();

    @each $key, $value in $tokens {
        @if list.index($keys, $key) == null {
            $unsupported-tokens: list.append($unsupported-tokens, $key, $separator: comma);
        }
    }

    @if list.length($unsupported-tokens) > 0 {
        @error "The following tokens are invalid: '#{$unsupported-tokens}'. The supported theme tokens are: '#{$keys}'";
    }

    @return $tokens;
}
