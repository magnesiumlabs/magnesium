// ============================================================================================= //
//                                            MIXINS                                             //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "../theme";
@use "../variables" as core-variables;
@use "../functions" as core-functions;
@use "./variables";
@use "./functions";

$_custom-property-prefix: "typography";

// ------------------------------------------------------------------------- //
// Private mixins
// ------------------------------------------------------------------------- //

@mixin _typography($style) {
    @each $key, $value in variables.$allowed-tokens {
        #{$key}: map.get($style, $key);
    }
}

// ------------------------------------------------------------------------- //
// Public mixins
// ------------------------------------------------------------------------- //

///
/// @example - scss
///   $theme: (
///     "primary": darkcyan
///   );
///
///   .foo {
///     @include color.theme($theme);
///   }
///
/// @example - css
///   .foo {
///     --mg-color-primary: darkcyan;
///   }
///
/// @param {Map} $theme - The theme tokens map. Use the default `$typographies` tokens.
///
@mixin theme($theme: core-variables.$typographies) {
    @each $key, $value in $theme {
        @debug $key;
        @debug $value;
    }

    $tokens: theme.validate-tokens(core-variables.$typographies, $theme);
    $tokens: theme.create-theme-vars($theme, $_custom-property-prefix);

    @include theme.create-theme($tokens);
}

///
/// @example - scss
///   $typography: (
///     "font-size": 16px,
///     "font-weight": 400
///   );
///
///   .foo {
///     @include theme-styles($typography);
///   }
///
/// @example - css
///   .foo {
///     font-size: 16px;
///     font-weight: 400;
///   }
///
/// @param {Map} $theme - The typography theme map.
///
@mixin theme-styles($theme) {
    @include _typography($theme);
}

///
/// @example - scss
///   $typography: (
///     "font-size": 16px
///   );
///
///   .foo {
///     @include create-theme($typography, "button");
///   }
///
/// @example - css
///   .foo {
///     --mg-typography-button-font-size: 16px;
///   }
///
/// @param {Map} $typography - The typography tokens map.
/// @param {String} $style - The typography style prefix.
///
/// @deprecated Use `create-theme` mixin instead.
///
@mixin create-typography($typography, $style) {
    @each $key, $value in $typography {
        @if list.index(variables.$allowed-tokens, $key) != null {
            --#{core-functions.create-name(typography-#{$style}-#{$key})}: #{$value};
        }
    }
}
