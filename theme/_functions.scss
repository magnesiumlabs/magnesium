// ============================================================================================= //
//                                           FUNCTIONS                                           //
// ============================================================================================= //

@use "sass:list";
@use "sass:map";
@use "@unsass/css/custom-properties";
@use "@unsass/types" as type;
@use "@unsass/string";
@use "../core/variables";

///
/// Validates theme's token and throws an error if tokens are invalid.
///
/// @param {Map} $reference - A map of reference tokens.
/// @param {Map} $tokens - A map of theme's tokens.
///
/// @return {Map} The validated theme map.
///
@function validate-tokens($reference, $tokens) {
    $keys: map.keys($reference);
    $unsupported-tokens: ();

    @each $key, $value in $tokens {
        @if list.index($keys, $key) == null {
            $unsupported-tokens: list.append($unsupported-tokens, $key, $separator: comma);
        }
    }

    @if list.length($unsupported-tokens) > 0 {
        @error "The following tokens are invalid: #{$unsupported-tokens}.";
    }

    @return $tokens;
}

///
/// Get token value from theme map.
///
/// @param {String} $token - A token name.
/// @param {Map} $map - A map of theme's tokens.
///
/// @return {String} The token value.
///
@function get-token($token, $map) {
    @return map.get($map, $token);
}

///
/// Transforms a theme's tokens value into a `var()` custom properties.
///
/// @example - scss
///   $theme: (
///     "text-color": darkcyan
///   );
///
///   $theme: theme.create-theme-vars($theme, "button");
///
///   $theme: (
///     "text-color": var(--md-button-text-color, darkcyan)
///   );
///
/// @param {Map} $theme - The theme tokens map.
/// @param {String} $prefix - Component's name to prepend for each token's custom property name.
///
/// @return {Map} The transformed theme map.
///
@function create-theme-vars($theme, $prefix) {
    @each $key, $value in $theme {
        $token: string.combine(variables.$prefix, $prefix, $key);

        @if type.is-map($theme) {
            $value: custom-properties.create-var(custom-properties.create($token, $value));
        } @else if type.is-list($theme) or type.is-string($theme) {
            $value: custom-properties.create-var(custom-properties.create($token));
        }

        $theme: map.set($theme, $key, $value);
    }

    @return $theme;
}

///
/// @example - scss
///   $theme: (
///     "text-color": darkcyan
///   );
///
///   .foo {
///     color: theme.create-var($theme, "text-color");
///   }
///
/// @example - css
///   .foo {
///     color: var(--mg-text-color, darkcyan);
///   }
///
/// @param {Map} $theme - The token's theme map.
/// @param {String} $token - The token name.
/// @param {Boolean} $fallback [true] - Choose if return default custom property fallback.
/// @param {String} $prefix [null] - Add prefix name on custom property `var()`.
///
/// @return {String} The generated custom property.
///
@function create-var($theme, $token, $fallback: true, $prefix: null) {
    $value: map.get($theme, $token);
    $token: string.combine(variables.$prefix, $prefix, $token);

    @if not $fallback {
        @return custom-properties.create-var(custom-properties.create($token));
    }

    @return custom-properties.create-var(custom-properties.create($token, $value));
}
